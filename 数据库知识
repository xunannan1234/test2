Mysql版本信息：5.5版本比较稳定
一个是client版本，一个是server版本，如果安装时发生冲突，需要先把原有版本卸载
Yum -y remove xxx
1.查看MYSQL版本，mysqladmin --version
2.mysql开机自启动，chkconfig mysql on
   结束开机自启动： chkconfig mysql off
3.给MySQL添加密码：/user/bin/mysqladmin -u root password root
4.MySQL核心目录：
     /var/lib/mysql: mysql 安装目录
     /usr/share/mysql :配置文件
/etc/init.d/mysql启停脚本
5.mysql默认端口：3306
6.查看MySQL默认编码：show variables like “%char”;
7.设置编码：
   Vi /etc/my.cnf
[mysql]
Default-character-set=utf8
[client]
Default-character-set=utf8
[mysqld]
Character_set_server=utf8
Character_set_server=utf8
Collation_server=utf8_general_ci
重启mysql
8.Mysql清屏 ctrl+L
9.
二：InnoDB:事务优先（适合高并发操作；行锁）
MyISAM:性能优先（表锁）      mysql的逻辑分层图

最后一层是：存储层
2.查询数据库支持哪些引擎：show engines；
3.默认的存储引擎：InnoDB
4.查看当前使用的引擎：show variables like “%storage_engine%”;
5.指定表的存储引擎和编码：
    
三：SQL优化：
原因：性能低，执行时间长，等待时间长，SQL语言欠佳。
a.SQL:编写过程
b.SQL优化 ：优化索引（主要）
        索引：index是帮助MYSQL高效获取数据的数据结构。
（B树（默认），HASH树，二叉树。。。）
B树：小的放左，大的放右边。

索引弊端：1.索引本身需要内存空间，不是所有情况均适用。
2，索引降低增删改的效率（因为修改时，需要修改索引）
优势：1，提高查询效率（降低IO使用率）
2.降低CPU的使用率。。。

3层Btree可以存放上百万条数据，数据全部放在叶节点中
查询只需要查询N次（Btree的高度）

F
分类：
单值索引：单列，如age，一个表可以有多个单值索引
唯一索引：不能重复（id）
复合索引：多个列构成的索引（相当于二级目录，（name，age）如果名字有重复，再用age查询。
创建索引：
      Create 索引类型 索引名 On 表（字段） 
例如：单值索引 create index index_name  on tb（name）；
      唯一索引 create unique index index_dept  on tb(dept);
      复合索引 create index  index_name_dept on tb(name,dept);


Ps:如果一个字段是主键，默认是索引。

删除索引：drop index 索引名 on  tb；
查询索引：show index  from tb；
6.SQL性能问题
A.分析SQL执行计划:explain ,可以模拟SQL优化器的SQL语句
Explain +SQL语句 
数据小的表，优先执行（执行中暂用较少内存）

7.索引类型（type)
  System>const>eq_ref>ref>range>index>all(前2个system/const一般达不到）
A.system(忽略）：只有一条数据的系统表，或衍生表只有一条数据
B.Const：仅仅能查到一条数据的SQL，用于primary key或unique索引
C.eq_ref:唯一性索引，对每个索引键的查询，返回匹配唯一行数据（只有1个），常见于主键索引和唯一索引。
D.Ref：非唯一性索引。

三：实现主从复制：
同步核心：二进制日志
1.master将改变的数，记录再二进制日志binarylog（二进制日志事件）
2.Salve将master中的binarylog拷贝到自己relaylog（中继日志）中
3.中继日志事件，将数据读取到自己的数据库中
Mysql主从复制是异步的，串行化的，有延迟。

Master：salve-1：n
配置：windows（mysql：my.ini)(master)
      Linux(mysql:my.cnf)(slave)
配置前，为了无误，先将权限/防火墙等关闭
Service iptables stop(Linux关闭防火墙的命令）
Window：右键网络：防火墙关闭
4.mysql允许远程链接（windows/linux）
 GRANT ALL PRIVILEGES ON *.* TO  ‘ROOT’@’%’  IDENTIFIED BY ‘ROOT’;
FLUSH PRIVILEGES;
A)windows作为主服务器的配置（my.ini)

Windows中的数据库，授权哪台计算机的数据库是自己的从数据库
GRANT REPLICATION slave ,reload,super ON *.*  TO ‘root’@’192.168.42.4’ IDENTIFIED BY ‘root'；
flush privileges;
5.查看主数据库的状态：show master status；
B)从数据库的配置：（linux：my.cnf)


配置哪台数据库是自己的主计算机：

6.开启主从同步：
 从机 start slave；
 检查：show slave status；主要观察Slave_IO_Running 和Slave_SQL_Running.确保二者都yes。

四：锁机制：
解决资源共享而造成的并发问题。
分类：
a.读锁（共享锁）,多个读操作互不干扰。
b.写锁（互斥锁），当前写操作没完毕，则无法进行其他（读写）
操作范围：
a.表锁：一次性对一张表整体加锁，如MyISAM存储引擎使用，开销小，加锁快，无死锁，并发度低。
b.行锁：一次性对一条数据加锁：如InnoDB存储引擎使用行锁，开销大，容易出现死锁。锁的范围较小，不易发生锁冲突，并发度高（很小发生并发问题：脏读等）
c.页锁：
Create table tablelocl
（
Id int primary key auto_increment,#自增
Name varchar(20)
)endien myisam;
增加锁：
Lock table 表1 read/write；
查看加锁的表：
Show open tables；

释放锁：unlock tables；
2.加写锁：
 Lock  table  tablelock  write;
3.查看哪些表加了锁：show open tables;
关闭commit命令：set autocommit=0；（数据不再自动提交）
4.对行锁：一般通过事务解决（commit或者rollback）
5.Begin；可以关闭自动提交。

五：一些其他优化方法：
Exist 和in
Select.. from table where exist/in （子查询）；
如果主查询的数据集大，则使用IN
如果子查询的数据集大，则使用exist





